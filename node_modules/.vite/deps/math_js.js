import {
  __commonJS
} from "./chunk-QOVRSCHT.js";

// node_modules/math.js/lib/utils/index.js
var require_utils = __commonJS({
  "node_modules/math.js/lib/utils/index.js"(exports, module) {
    module.exports = {
      isPrime: function(n) {
        for (var i = 2; i < n; i++) {
          if (n % i === 0) {
            return false;
          }
        }
        return n > 1;
      },
      isEven: function(n) {
        return n % 2 === 0;
      },
      isOdd: function(n) {
        return !this.isEven(n);
      },
      format: function(val, decimals) {
        return val.toFixed(decimals) / 1;
      },
      dropFirstDigit: function(n) {
        return Number(n.toString().substring(1));
      },
      dropLastDigit: function(n) {
        return Number(n.toString().substring(0, n.toString().length - 1));
      },
      dropDigit: function(n, pos) {
        return Number(n.toString().substring(0, pos - 1).concat(n.toString().substring(pos, n)));
      }
    };
  }
});

// node_modules/math.js/lib/statistics/index.js
var require_statistics = __commonJS({
  "node_modules/math.js/lib/statistics/index.js"(exports, module) {
    module.exports = {
      minElement: function(arr) {
        return Math.min.apply(null, arr);
      },
      maxElement: function(arr) {
        return Math.max.apply(null, arr);
      },
      between: function(val, min, max) {
        return min <= val == val <= max;
      }
    };
  }
});

// node_modules/math.js/lib/probability/index.js
var require_probability = __commonJS({
  "node_modules/math.js/lib/probability/index.js"(exports, module) {
    module.exports = {
      random: function() {
        return Math.random();
      },
      randomElement: function(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
      },
      factorial: function(n) {
        return n * (n - 1);
      }
    };
  }
});

// node_modules/math.js/lib/arithmetic/index.js
var require_arithmetic = __commonJS({
  "node_modules/math.js/lib/arithmetic/index.js"(exports, module) {
    module.exports = {
      ceil: function(val) {
        return Math.ceil(val / 10) * 10;
      },
      round: function(n) {
        return Math.round(n);
      },
      fround: function(n) {
        return Math.fround(n);
      },
      floor: function(n) {
        return Math.floor(n);
      },
      sign: function(n) {
        return Math.sign(n);
      },
      abs: function(n) {
        return Math.abs(n);
      },
      imul: function(a, b) {
        return Math.imul(a, b);
      },
      pow: function(base, exp) {
        return Math.pow(base, exp);
      },
      square: function(val) {
        return val * val;
      },
      cube: function(val) {
        return val * val * val;
      },
      sqrt: function(n) {
        return Math.sqrt(n);
      },
      cbrt: function(n) {
        return Math.cbrt(n);
      },
      exp: function(n) {
        return Math.exp(n);
      },
      expm1: function(n) {
        return Math.expm1(n);
      },
      trunc: function(n) {
        return Math.trunc(n);
      },
      greatestCommonDivisor: function gcd(x, y) {
        var remainder = x % y;
        if (remainder === 0) {
          return y;
        }
        return gcd(y, remainder);
      },
      log: function(n) {
        return Math.log(n);
      },
      log2: function(n) {
        return Math.log2(n);
      },
      log10: function(n) {
        return Math.log10(n);
      },
      log1p: function(n) {
        return Math.log1p(n);
      },
      hypot: function(...arr) {
        return Math.hypot(...arr);
      },
      dCeil: function(num, n) {
        let multiplyValue = Math.pow(10, n);
        console.log("dCeil", num, n, multiplyValue, Math.ceil(num / multiplyValue) * multiplyValue);
        return Math.ceil(num * multiplyValue) / multiplyValue;
      },
      dRound: function(num, n) {
        let multiplyValue = Math.pow(10, n);
        return Math.round(num * multiplyValue) / multiplyValue;
      },
      dFloor: function(num, n) {
        let multiplyValue = Math.pow(10, n);
        return Math.floor(num * multiplyValue) / multiplyValue;
      },
      dTrunc: function(num, n) {
        let multiplyValue = Math.pow(10, n);
        return Math.trunc(num * multiplyValue) / multiplyValue;
      }
    };
  }
});

// node_modules/math.js/lib/constants.js
var require_constants = __commonJS({
  "node_modules/math.js/lib/constants.js"(exports, module) {
    module.exports = Object.freeze({
      PI: Math.PI,
      E: Math.E,
      LN10: Math.LN10,
      LN2: Math.LN2,
      LOG10E: Math.LOG10E,
      LOG2E: Math.LOG2E,
      SQRT1_2: Math.SQRT1_2,
      SQRT2: Math.SQRT2,
      FEET_TO_INCHES_FACTOR: 12,
      FEET_TO_METERS_FACTOR: 0.3048,
      FEET_TO_MILES_FACTOR: 1 / 5280,
      FEET_TO_YARDS_FACTOR: 1 / 3,
      INCHES_TO_FEET_FACTOR: 1 / 12,
      INCHES_TO_METERS_FACTOR: 0.0254,
      INCHES_TO_MILES_FACTOR: 1 / 63360,
      INCHES_TO_YARDS_FACTOR: 1 / 36,
      MILES_TO_FEET_FACTOR: 5280,
      MILES_TO_INCHES_FACTOR: 63360,
      MILES_TO_METERS_FACTOR: 1609.344,
      MILES_TO_YARDS_FACTOR: 1760,
      YARDS_TO_INCHES_FACTOR: 36,
      YARDS_TO_FEET_FACTOR: 3,
      YARDS_TO_METERS_FACTOR: 0.9144,
      YARDS_TO_MILES_FACTOR: 1 / 1760,
      CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR: 9 / 5,
      CELSIUS_TO_FAHRENEIT_FACTOR: 32
    });
  }
});

// node_modules/math.js/lib/unit/index.js
var require_unit = __commonJS({
  "node_modules/math.js/lib/unit/index.js"(exports, module) {
    var constants = require_constants();
    module.exports = {
      yardsToFeet: function(n) {
        return n * constants.YARDS_TO_FEET_FACTOR;
      },
      feetToYards: function(n) {
        return n * constants.FEET_TO_YARDS_FACTOR;
      },
      yardsToInches: function(n) {
        return n * constants.YARDS_TO_INCHES_FACTOR;
      },
      inchesToYards: function(n) {
        return constants.INCHES_TO_YARDS_FACTOR * n;
      },
      inchesToMiles: function(n) {
        return constants.INCHES_TO_MILES_FACTOR * n;
      },
      feetToInches: function(n) {
        return constants.FEET_TO_INCHES_FACTOR * n;
      },
      feetToMeters: function(n) {
        return constants.FEET_TO_METERS_FACTOR * n;
      },
      feetToMiles: function(n) {
        return constants.FEET_TO_MILES_FACTOR * n;
      },
      inchesToFeet: function(n) {
        return constants.INCHES_TO_FEET_FACTOR * n;
      },
      inchesToMeters: function(n) {
        return constants.INCHES_TO_METERS_FACTOR * n;
      },
      milesToYards: function(n) {
        return constants.MILES_TO_YARDS_FACTOR * n;
      },
      milesToMeters: function(n) {
        return constants.MILES_TO_METERS_FACTOR * n;
      },
      milesToInches: function(n) {
        return constants.MILES_TO_INCHES_FACTOR * n;
      },
      milesToFeet: function(n) {
        return constants.MILES_TO_FEET_FACTOR * n;
      },
      yardsToMiles: function(n) {
        return constants.YARDS_TO_MILES_FACTOR * n;
      },
      yardsToMeters: function(n) {
        return constants.YARDS_TO_METERS_FACTOR * n;
      },
      toFahrenheit: function(val) {
        return val * constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR + constants.CELSIUS_TO_FAHRENEIT_FACTOR;
      },
      toCelsius: function(val) {
        return (val - constants.CELSIUS_TO_FAHRENEIT_FACTOR) / constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR;
      }
    };
  }
});

// node_modules/math.js/lib/trigonometric/index.js
var require_trigonometric = __commonJS({
  "node_modules/math.js/lib/trigonometric/index.js"(exports, module) {
    module.exports = {
      sin: function(n) {
        return Math.sin(n);
      },
      cos: function(n) {
        return Math.cos(n);
      },
      tan: function(n) {
        return Math.tan(n);
      },
      acos: function(n) {
        return Math.acos(n);
      },
      asin: function(n) {
        return Math.asin(n);
      },
      acosh: function(n) {
        return Math.acosh(n);
      },
      atan: function(n) {
        return Math.atan(n);
      },
      atan2: function(y, x) {
        return Math.atan2(y, x);
      }
    };
  }
});

// node_modules/math.js/lib/index.js
var require_lib = __commonJS({
  "node_modules/math.js/lib/index.js"(exports, module) {
    module.exports = Object.assign({}, require_utils(), require_statistics(), require_probability(), require_arithmetic(), require_unit(), require_trigonometric());
  }
});

// node_modules/math.js/index.js
var require_math = __commonJS({
  "node_modules/math.js/index.js"(exports, module) {
    module.exports = require_lib();
  }
});

// dep:math_js
var math_js_default = require_math();
export {
  math_js_default as default
};
//# sourceMappingURL=math_js.js.map
